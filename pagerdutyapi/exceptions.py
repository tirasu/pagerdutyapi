"""
Exceptions used by module
"""


class PagerDutyError(ValueError):
    """
    Generic error generated by PagerDuty API
    """
    def can_be_repeated(self):
        return isinstance(self, RecoverableErrorMixin)


class RecoverableErrorMixin(object):
    """
    Mixin allowing exceptions to be marked with indication whether the request
    causing them could be repeated in order to try and get different,
    non-erratic result
    """


class RequestRejected(PagerDutyError):
    """
    For some reason PagerDuty API has rejected the request
    """
    def __init__(self, details=None):
        """
        Initialize the exception based on more information from PagerDuty
        :param details: deserialized response from the server
        :type details: dict
        """
        # TODO: Reliance on PagerDuty response is shaky, make it conditional:
        if details is None:
            details = {}

        self._details = details
        message = '{}: {}'.format(
            details.get('message'),
            '; '.join(details.get('errors', [])),
        )
        # Make it be initialized as standard ValueError
        ValueError.__init__(self, message)


class TooManyApiCalls(RecoverableErrorMixin, RequestRejected):
    """
    PagerDuty said we are calling it too often in current situation (throttling
    is fluid)
    """


class ServerError(RecoverableErrorMixin, PagerDutyError):
    """
    PagerDuty was not able to fulfill the request due to its own issues
    """
    def __init__(self, status_code):
        ValueError.__init__(
            'PagerDuty returned wrong status code: {}'.format(
                status_code,
            ),
        )


class NetworkError(RecoverableErrorMixin, PagerDutyError):
    """
    Error in communication with PagerDuty API
    """


class UnknownPagerDutyApiError(PagerDutyError):
    """
    Error that indicates unknown issue, not documented in their API
    """
    def __init__(self, status_code, details):
        self._status_code = status_code
        super(UnknownPagerDutyApiError, self).__init__(details)
